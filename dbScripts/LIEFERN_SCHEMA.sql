-- MySQL Script generated by MySQL Workbench
-- Tue Apr  7 19:00:42 2015
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
-- -----------------------------------------------------
-- Schema liefern
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `liefern` ;

-- -----------------------------------------------------
-- Schema liefern
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `liefern` DEFAULT CHARACTER SET utf8 ;
USE `liefern` ;

-- -----------------------------------------------------
-- Table `liefern`.`liefernUser`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `liefern`.`liefernUser` ;

CREATE TABLE IF NOT EXISTS `liefern`.`liefernUser` (
  `userId` INT(11) NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(100) NULL DEFAULT NULL,
  `email` VARCHAR(50) NOT NULL,
  `mobile` VARCHAR(10) NOT NULL,
  `active` TINYINT(1) NULL DEFAULT '1' COMMENT '0 — Inactive 1 — Active',
  `secretKey` VARCHAR(100) NULL DEFAULT NULL,
  `hashPassword` VARCHAR(100) NULL DEFAULT NULL,
  `sessionToken` VARCHAR(100) NULL DEFAULT NULL,
  `avgRating` FLOAT NULL DEFAULT NULL,
  `createdDate` DATETIME NULL DEFAULT NULL,
  `modifiedDate` DATETIME NULL DEFAULT NULL,
  PRIMARY KEY (`userId`),
  UNIQUE INDEX `email_UNIQUE` (`email` ASC))
ENGINE = InnoDB
AUTO_INCREMENT = 15
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `liefern`.`address`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `liefern`.`address` ;

CREATE TABLE IF NOT EXISTS `liefern`.`address` (
  `addressId` INT(11) NOT NULL AUTO_INCREMENT,
  `address1` VARCHAR(100) NULL DEFAULT NULL,
  `address2` VARCHAR(100) NULL DEFAULT NULL,
  `city` VARCHAR(100) NULL DEFAULT NULL,
  `state` VARCHAR(50) NULL DEFAULT NULL,
  `country` VARCHAR(50) NULL DEFAULT NULL,
  `zip` INT(11) NULL DEFAULT NULL,
  `userId` INT(11) NULL DEFAULT NULL,
  `home` TINYINT(1) NULL DEFAULT '0' COMMENT '0 — not a home location 1—users home location ',
  `createdDate` DATETIME NULL DEFAULT NULL,
  `modifiedDate` DATETIME NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`addressId`),
  INDEX `fk_user_address_userId_idx` (`userId` ASC),
  CONSTRAINT `fk_user_address_userId`
    FOREIGN KEY (`userId`)
    REFERENCES `liefern`.`liefernUser` (`userId`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `liefern`.`geo`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `liefern`.`geo` ;

CREATE TABLE IF NOT EXISTS `liefern`.`geo` (
  `geoId` INT(11) NOT NULL AUTO_INCREMENT,
  `userId` INT(11) NOT NULL,
  `lat` FLOAT(10,6) NULL DEFAULT NULL,
  `lng` FLOAT(10,6) NULL DEFAULT NULL,
  `radius` INT(11) NULL DEFAULT NULL,
  `createdDate` DATETIME NULL DEFAULT NULL,
  `modifiedDate` DATETIME NULL DEFAULT NULL,
  PRIMARY KEY (`geoId`),
  INDEX `fk_user_geo_userId_idx` (`userId` ASC),
  CONSTRAINT `fk_user_geo_userId`
    FOREIGN KEY (`userId`)
    REFERENCES `liefern`.`liefernUser` (`userId`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `liefern`.`order`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `liefern`.`order` ;

CREATE TABLE IF NOT EXISTS `liefern`.`order` (
  `orderId` INT(11) NOT NULL AUTO_INCREMENT,
  `orderType` TINYINT(1) NULL DEFAULT NULL COMMENT '0 —> user story 1 — i.e from location : home — to location : package to be delivered\n1 —> user story 2 — i.e from location : null / any store — to location : home location ',
  `orderStatus` INT(11) NULL DEFAULT NULL COMMENT '0 - PENDING\n1 - ACK \n2 - REJECTED BY CUSTOMER\n3 - REJECTED BY TRAVELLER\n4 - CANCELLED \n5 - DELIVERED ',
  `fromLoc` INT(11) NULL DEFAULT NULL,
  `toLoc` INT(11) NULL DEFAULT NULL,
  `customerId` INT(11) NULL DEFAULT NULL,
  `travlerId` INT(11) NULL DEFAULT NULL,
  `distance` INT(11) NULL DEFAULT NULL COMMENT 'User Story 1 : \nwill be update from API after calculating distance between fromLoc and toLoc using Google Maps API\nUser Story 2 : \nwill be NULL',
  `suggestAmount` INT(11) NULL DEFAULT NULL COMMENT 'User Story 1 : \nwill be calculated by using RateMetrics — distance and package details\nUser Story 2 : \nwill be standard delivery charges based on time of customers location — will be available in RateMetrics Table',
  `customerAmount` INT(11) NULL DEFAULT NULL,
  `timeToLive` INT(11) NULL DEFAULT NULL COMMENT 'may or may not be used. future purposes —  to reduce the size of order table and achrive data more often ',
  `createdDate` DATETIME NULL DEFAULT NULL,
  `modifiedDate` DATETIME NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`orderId`),
  INDEX `fk_user_order_userId_customerId_idx` (`customerId` ASC),
  INDEX `fk_user_order_userId_driverId_idx` (`travlerId` ASC),
  INDEX `fk_address_order_addressId_fromLoc_idx` (`fromLoc` ASC),
  INDEX `fk_address_order_addressId_toLoc_idx` (`toLoc` ASC),
  CONSTRAINT `fk_address_order_addressId_fromLoc`
    FOREIGN KEY (`fromLoc`)
    REFERENCES `liefern`.`address` (`addressId`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_address_order_addressId_toLoc`
    FOREIGN KEY (`toLoc`)
    REFERENCES `liefern`.`address` (`addressId`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_user_order_userId_customerId`
    FOREIGN KEY (`customerId`)
    REFERENCES `liefern`.`liefernUser` (`userId`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_user_order_userId_travelerId`
    FOREIGN KEY (`travlerId`)
    REFERENCES `liefern`.`liefernUser` (`userId`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `liefern`.`package`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `liefern`.`package` ;

CREATE TABLE IF NOT EXISTS `liefern`.`package` (
  `packageId` INT(11) NOT NULL AUTO_INCREMENT,
  `orderId` INT(11) NULL DEFAULT NULL,
  `weight` INT(11) NULL DEFAULT NULL COMMENT 'always insert in pounds ( convert in API )',
  `size` VARCHAR(50) NULL DEFAULT NULL COMMENT 'format :  108 x 60 x 30 inches —input from front end should be taken in this format  —convert in API if provided by any other options ',
  `description` VARCHAR(100) NULL DEFAULT NULL COMMENT 'user can specify mode, make, unique number, color etc ',
  `content` VARCHAR(100) NOT NULL COMMENT 'mandatory field — user need to specify content of package — so the driver can carry it accordingly — e.g: fragile item ',
  `isFragile` TINYINT(1) NULL DEFAULT '0' COMMENT '0 — NO 1 —YES',
  PRIMARY KEY (`packageId`),
  INDEX `fk_order_package_orderId_idx` (`orderId` ASC),
  CONSTRAINT `fk_order_package_orderId`
    FOREIGN KEY (`orderId`)
    REFERENCES `liefern`.`order` (`orderId`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `liefern`.`payments`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `liefern`.`payments` ;

CREATE TABLE IF NOT EXISTS `liefern`.`payments` (
  `paymentId` INT(11) NOT NULL AUTO_INCREMENT,
  `userId` INT(11) NULL DEFAULT NULL,
  `creditCard` INT(12) NULL DEFAULT NULL,
  `CVV` INT(3) NULL DEFAULT NULL,
  `expiryDate` DATE NULL DEFAULT NULL,
  `nameOnCard` VARCHAR(100) NULL DEFAULT NULL,
  `createdDate` DATETIME NULL DEFAULT NULL,
  `modifiedDate` DATETIME NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`paymentId`),
  INDEX `fk_liefernUser_payments_userId_idx` (`userId` ASC),
  CONSTRAINT `fk_liefernUser_payments_userId`
    FOREIGN KEY (`userId`)
    REFERENCES `liefern`.`liefernUser` (`userId`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `liefern`.`rateMeterics`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `liefern`.`rateMeterics` ;

CREATE TABLE IF NOT EXISTS `liefern`.`rateMeterics` (
  `rateMetericsId` INT(11) NOT NULL AUTO_INCREMENT,
  `weight` INT(11) NULL DEFAULT NULL,
  `miles` INT(11) NULL DEFAULT NULL,
  `time` TIME NULL DEFAULT NULL,
  `suggestedRate` FLOAT NULL DEFAULT NULL,
  PRIMARY KEY (`rateMetericsId`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `liefern`.`travelerRating`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `liefern`.`travelerRating` ;

CREATE TABLE IF NOT EXISTS `liefern`.`travelerRating` (
  `travelerRatingId` INT(11) NOT NULL AUTO_INCREMENT,
  `customerId` INT(11) NULL DEFAULT NULL,
  `travelerId` INT(11) NULL DEFAULT NULL,
  `orderId` INT(11) NULL DEFAULT NULL,
  `rating` FLOAT NULL DEFAULT NULL,
  `ratingDate` DATETIME NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`travelerRatingId`),
  INDEX `fk_user_travelerRating_customerId_idx` (`customerId` ASC),
  INDEX `fk_user_travelerRating_travelerId_idx` (`travelerId` ASC),
  INDEX `fk_order_travelerRating_orderId_idx` (`orderId` ASC),
  CONSTRAINT `fk_order_travelerRating_orderId`
    FOREIGN KEY (`orderId`)
    REFERENCES `liefern`.`order` (`orderId`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_user_travelerRating_customerId`
    FOREIGN KEY (`customerId`)
    REFERENCES `liefern`.`liefernUser` (`userId`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_user_travelerRating_travelerId`
    FOREIGN KEY (`travelerId`)
    REFERENCES `liefern`.`liefernUser` (`userId`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
